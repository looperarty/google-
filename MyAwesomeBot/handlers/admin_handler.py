# handlers/admin_handler.py

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from config import ADMIN_ID
from database import get_total_users, get_daily_video_creations, get_daily_payments, add_subscription, get_all_subscriptions, reset_all_subscriptions, add_balance, get_pending_requests, delete_pending_request

router = Router()

@router.message(Command("admin"))
async def admin_panel_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    total_users = await get_total_users()
    daily_creations = await get_daily_video_creations()
    daily_payments = await get_daily_payments()
    
    stats_message = (
        "üìà **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
        f"üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: **{daily_creations}**\n"
        f"üí≥ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: **{daily_payments}** –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:**\n"
        "/addsub <email>\n"
        "/listsubs\n"
        "/resetsubs\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:**\n"
        "/pending - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/addcredits <id> <—Å—É–º–º–∞> - –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"
        "**–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:**\n"
        "–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –≤ –±–æ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é: `/send <ID_–∑–∞–ø—Ä–æ—Å–∞>`"
    )
    
    await message.answer(stats_message)

@router.message(Command("addsub"))
async def add_subscription_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    email = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if not email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É: /addsub <email>")
        return
    
    success = await add_subscription(email)
    
    if success:
        await message.answer(f"–ü–æ—á—Ç–∞ `{email}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: –ü–æ—á—Ç–∞ `{email}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@router.message(Command("listsubs"))
async def list_subscriptions_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    subscriptions = await get_all_subscriptions()
    
    if not subscriptions:
        await message.answer("–ü—É–ª –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã —Å –ø–æ–º–æ—â—å—é /addsub.")
        return
        
    stats_message = "üìß **–ü—É–ª –ø–æ–¥–ø–∏—Å–æ–∫:**\n\n"
    for email, usage, limit in subscriptions:
        stats_message += f"`{email}`: {usage} –∏–∑ {limit} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
        
    await message.answer(stats_message)

@router.message(Command("resetsubs"))
async def reset_subscriptions_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    await reset_all_subscriptions()
    await message.answer("–°—á—ë—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã.")

@router.message(Command("pending"))
async def show_pending_requests_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return

    requests = await get_pending_requests()
    
    if not requests:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
        return

    requests_message = "üìù **–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n\n"
    for request_id, user_id, prompt, type in requests:
        requests_message += f"**ID –∑–∞–ø—Ä–æ—Å–∞:** `{request_id}`\n"
        requests_message += f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{user_id}`\n"
        requests_message += f"**–¢–∏–ø:** `{type}`\n"
        requests_message += f"**–ü—Ä–æ–º—Ç:** `{prompt}`\n\n"
    
    await message.answer(requests_message)

@router.message(F.from_user.id == ADMIN_ID, F.video)
async def send_video_handler(message: Message) -> None:
    command_text = message.caption
    
    if command_text and command_text.startswith('/send'):
        try:
            request_id = int(command_text.split()[1])
            pending_requests = await get_pending_requests()
            
            user_id = None
            for req_id, req_user_id, _, _ in pending_requests:
                if req_id == request_id:
                    user_id = req_user_id
                    break
            
            if user_id:
                await message.bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id
                )
                await message.answer(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}`.")
                await delete_pending_request(request_id)
            else:
                await message.answer(f"–ó–∞–ø—Ä–æ—Å —Å ID `{request_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        except (ValueError, IndexError):
            await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/send ID_–∑–∞–ø—Ä–æ—Å–∞`")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –û—à–∏–±–∫–∞: {e}")

@router.message(Command("addcredits"))
async def add_credits_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        
        await add_balance(user_id, amount)
        await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ **{amount}** –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}`.")
    except (ValueError, IndexError):
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/addcredits ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞`")