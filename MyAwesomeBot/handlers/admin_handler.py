# handlers/admin_handler.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from html import escape

from config import ADMIN_ID, MDL_PER_CREDIT
from database import get_total_users, get_daily_video_creations, get_daily_payments, add_balance, get_pending_requests, delete_pending_request, get_user_sequential_id

router = Router()

@router.message(Command("admin"))
async def admin_panel_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    await send_admin_panel_stats(message)

@router.callback_query(F.data == "show_admin_panel")
async def show_admin_panel_callback(callback: CallbackQuery) -> None:
    if callback.from_user.id != ADMIN_ID:
        return
    
    await send_admin_panel_stats(callback.message)
    await callback.answer()

async def send_admin_panel_stats(message: Message):
    total_users = await get_total_users()
    daily_creations = await get_daily_video_creations()
    daily_payments = await get_daily_payments()
    
    daily_earnings_mdl = daily_payments * MDL_PER_CREDIT
    
    stats_message = (
        "üìà **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n"
        f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
        f"   –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–æ—Ç–∞: **{total_users}**\n\n"
        f"üé¨ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å:**\n"
        f"   –í—Å–µ–≥–æ: **{daily_creations}**\n"
        f"   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: (–≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n\n"
        f"üí≥ **–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
        f"   **{daily_payments}** –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ **{daily_earnings_mdl}** –ª–µ–µ–≤)"
    )
    
    await message.answer(stats_message)

@router.message(Command("pending"))
async def show_pending_requests_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return

    requests = await get_pending_requests()
    
    if not requests:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
        return

    requests_message = "üìù **–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n\n"
    for user_id, prompt, type in requests:
        sequential_id = await get_user_sequential_id(user_id)
        requests_message += f"**–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä:** <code>{sequential_id}</code>\n"
        requests_message += f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** <code>{user_id}</code>\n"
        requests_message += f"**–¢–∏–ø:** <code>{type}</code>\n"
        requests_message += f"**–ü—Ä–æ–º—Ç:** <code>{escape(prompt)}</code>\n\n"
    
    await message.answer(requests_message)

@router.message(F.from_user.id == ADMIN_ID, F.video)
async def send_video_handler(message: Message) -> None:
    command_text = message.caption
    
    if command_text and command_text.startswith('/send'):
        try:
            user_id = int(command_text.split()[1])
            pending_requests = await get_pending_requests()
            
            if user_id in [req_user_id for req_user_id, _, _ in pending_requests]:
                await message.bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id
                )
                await message.answer(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
                await delete_pending_request(user_id)
            else:
                await message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        except (ValueError, IndexError):
            await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/send ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –û—à–∏–±–∫–∞: {e}")

@router.message(Command("addcredits"))
async def add_credits_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        
        await add_balance(user_id, amount)
        await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ **{amount}** –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
    except (ValueError, IndexError):
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/addcredits ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞`")