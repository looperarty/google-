# handlers/admin_handler.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from html import escape

from config import ADMIN_ID, MDL_PER_CREDIT
from database import get_total_users, get_total_video_creations, get_total_free_generations, get_daily_payments, add_balance, get_pending_requests, delete_pending_request, get_user_sequential_id, get_total_subscribers

router = Router()

@router.message(Command("admin"))
async def admin_panel_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    await send_admin_panel_stats_selector(message)

@router.callback_query(F.data == "show_admin_panel")
async def show_admin_panel_callback(callback: CallbackQuery) -> None:
    if callback.from_user.id != ADMIN_ID:
        return
    
    await send_admin_panel_stats_selector(callback.message)
    await callback.answer()

async def send_admin_panel_stats_selector(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today")],
        [InlineKeyboardButton(text="üóìÔ∏è –í—á–µ—Ä–∞", callback_data="stats_yesterday")],
        [InlineKeyboardButton(text="üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="stats_month")],
        [InlineKeyboardButton(text="All", callback_data="stats_all")]
    ])
    
    await message.answer("üìä **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**", reply_markup=keyboard)


@router.callback_query(F.data.startswith("stats_"))
async def show_stats_by_time_frame(callback: CallbackQuery):
    time_frame = callback.data.split("_")[1]
    
    total_users = await get_total_users()
    total_generations = await get_total_video_creations(time_frame)
    free_generations = await get_total_free_generations(time_frame)
    total_payments = await get_daily_payments()
    total_subscribers = await get_total_subscribers()
    
    daily_earnings_mdl = total_payments * MDL_PER_CREDIT

    stats_message = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {time_frame}:**\n\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {total_subscribers}\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n\n"
        f"üé¨ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:** {total_generations}\n"
        f"   - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_generations}\n\n"
        f"üí≥ **–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
        f"   **{total_payments}** –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ **{daily_earnings_mdl}** –ª–µ–µ–≤)\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:**\n"
        "/pending - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/addcredits <id> <—Å—É–º–º–∞> - –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"
        "**–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:**\n"
        "–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –≤ –±–æ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é: `/send <ID_–∑–∞–ø—Ä–æ—Å–∞>`"
    )
    
    await callback.message.answer(stats_message)
    await callback.answer()

@router.message(Command("pending"))
async def show_pending_requests_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return

    requests = await get_pending_requests()
    
    if not requests:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
        return

    requests_message = "üìù **–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n\n"
    for user_id, prompt, type in requests:
        sequential_id = await get_user_sequential_id(user_id)
        requests_message += f"**–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä:** <code>{sequential_id}</code>\n"
        requests_message += f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** <code>{user_id}</code>\n"
        requests_message += f"**–¢–∏–ø:** <code>{type}</code>\n"
        requests_message += f"**–ü—Ä–æ–º—Ç:** <code>{escape(prompt)}</code>\n\n"
    
    await message.answer(requests_message)

@router.message(F.from_user.id == ADMIN_ID, F.video)
async def send_video_handler(message: Message) -> None:
    command_text = message.caption
    
    if command_text and command_text.startswith('/send'):
        try:
            user_id = int(command_text.split()[1])
            
            requests = await get_pending_requests()
            request_exists = any(req_user_id == user_id for req_user_id, _, _ in requests)
            
            if request_exists:
                await message.bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id
                )
                await message.answer(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
                await delete_pending_request(user_id)
            else:
                await message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        except (ValueError, IndexError):
            await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/send ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –û—à–∏–±–∫–∞: {e}")

@router.message(Command("addcredits"))
async def add_credits_handler(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        
        await add_balance(user_id, amount)
        await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ **{amount}** –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
    except (ValueError, IndexError):
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/addcredits ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞`")